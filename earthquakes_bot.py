from telebot import TeleBot, types
from dotenv import load_dotenv, find_dotenv
from os import environ
from earthquakes_info import find_last_earthquakes, get_coords


load_dotenv(find_dotenv())
telegram_bot_token = environ["TELEGRAM_API"]
yandex_api_key = environ["YANDEX_API"]
bot = TeleBot(telegram_bot_token)
longitude, latitude = 0, 0
radius = 3000

def get_users_coords(message):
    global latitude, longitude
    place = message.text
    longitude, latitude = get_coords(place, yandex_api_key)
    if not longitude or not latitude:
        bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ!\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (0, 0)")
        longitude, latitude = 0, 0
        return None
    bot.send_message(message.chat.id, f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n{latitude} (—à–∏—Ä–æ—Ç–∞), {longitude} (–¥–æ–ª–≥–æ—Ç–∞)")


def get_search_radius(message):
    global radius
    argument = message.text
    if len(argument.split()) > 1:
        bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ!")
        return None
    elif not argument.isdigit():
        bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!")
        return None
    elif int(argument) > 20001:
        bot.send_message(message.chat.id, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å - 21.000 –∫–º!")
        return None
    radius = int(argument)
    bot.send_message(message.chat.id, f"–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ {radius} –∫–º.")


def get_last_earthquakes(message):
    global longitude, latitude, radius
    argument = message.text
    if len(argument.split()) > 1:
        bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —á–∏—Å–ª–æ!")
        return None
    elif not argument.isdigit():
        bot.send_message(message.chat.id, "–í—ã –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!")
        return None

    earthquakes = find_last_earthquakes(latitude, longitude, int(argument), radius)

    if not len(earthquakes):
        bot.send_message(message.chat.id, "–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return None

    bot.send_message(message.chat.id, "–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π:")
    for earthquake in earthquakes:
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton(text="üó∫ –ö–∞—Ä—Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏—à–µ—Å—Ç–≤–∏—è", url = earthquake["map"])
        markup.add(button)
        bot.send_message(message.chat.id, f"""
{earthquake["title"]}

üö© –ú–µ—Å—Ç–æ —Å–æ–±—ã—Ç–∏—è -> {earthquake["place"]}
üïò –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è -> {earthquake["date"]}
‚ÜîÔ∏è –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ->  {earthquake["distance"]} –∫–º

üåê‚ÜîÔ∏è –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —à–∏—Ä–æ—Ç–∞ -> {earthquake["latitude"]}
üåê‚Üï –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –¥–æ–ª–≥–æ—Ç–∞ -> {earthquake["longitude"]}
                """, reply_markup=markup)


@bot.message_handler(commands=["start", "help"])
def start(message):
    markup = types.ReplyKeyboardMarkup()
    setplace_button = types.KeyboardButton("üìç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ") 
    setradius_button = types.KeyboardButton("‚≠ï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞")
    fetch_button = types.KeyboardButton("üîé –ù–∞–π—Ç–∏ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è")
    info_button = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
    markup.add(setplace_button, setradius_button, fetch_button, info_button)
    bot.send_message(message.chat.id, """
    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:

/setplace -> —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –û—Å—Ç—Ä–æ–≤ –ù–æ–ª—å)
/setradius -> —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –ø–æ–∏—Å–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)
/fetch -> –ø–æ–ª—É—á–∏—Ç—å –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
/info -> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
/help –ª–∏–±–æ /start -> –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """, reply_markup=markup)


@bot.message_handler(commands=["info"])
def info(message):
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="üì© –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π", url = "https://github.com/Nick536363/Earthquake_Bot")
    markup.add(button)
    bot.send_message(message.chat.id, """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:

–¢–∏–º–ª–∏–¥: Nick536363
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: yatoro-asu
    """, reply_markup=markup)


@bot.message_handler(commands=["setplace"])
def setplace(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–≥–æ—Ä–æ–¥, –ø–æ—Å–µ–ª–æ–∫, –¥–µ—Ä–µ–≤–Ω—è –∏ —Ç.–ø.).")
    bot.register_next_step_handler(message, get_users_coords)
    

@bot.message_handler(commands=["setradius"])
def setradius(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö (20.001 –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ)")
    bot.register_next_step_handler(message, get_search_radius)


@bot.message_handler(commands=["fetch"])
def fetch(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è")
    bot.register_next_step_handler(message, get_last_earthquakes)


@bot.message_handler(content_types="text")
def func_allocator(message):
    match message.text:
        case "üìç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ":
            setplace(message)
        case "‚≠ï –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞":
            setradius(message)
        case "üîé –ù–∞–π—Ç–∏ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è":
            fetch(message)
        case "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ":
            info(message)
        case _:
            bot.send_message(message.chat.id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!")

def bot_loop():
    bot.polling(none_stop=True)


if __name__ == "__main__":
    bot_loop()